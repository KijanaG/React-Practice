//**************************************************************************\\
		SECTION 3 UNDERSTANDING BASE FEATURES & SYNTAX
\\**************************************************************************//
class App extends Component {
  state = {
    persons : [
      {name: 'KJ', age: 30},
      {name: 'Billy', age: 33},
      {name: 'Musa', age: 22}
    ]
  }
  switchNameHandler = (newName) => {
    // console.log("Was clicked");
    //Don't Do This this.state.persons[0].name = "Renegade";
    this.setState({
      persons: [
        {name: newName, age: 30},
        {name: 'Billy', age: 33},
        {name: 'Musa', age: 22}
      ]
    })
  }

  nameChangedHandler = (event) => {
    this.setState({
      persons: [
        {name: "KJ", age: 30},
        {name: 'Billy', age: 33},
        {name: event.target.value, age: 22}
      ]
    })
  }
  render() {
    const style = {
      backgroundColor: "white",
      font: 'inherit',
      border: "1px solid blue",
      padding: "8px",
      cursor: "pointer"
    }
    return (
      <div className="App">
        <h1> This is a React App </h1>
        <p>This is working! </p>
        <button style={style} onClick={this.switchNameHandler.bind(this, "Kijana G")}> Switch Name </button>
        <Person 
          name={this.state.persons[0].name} 
          age={this.state.persons[0].age} />
        <Person 
        name={this.state.persons[1].name} 
        age={this.state.persons[1].age}
        click={() => this.switchNameHandler("Hogwarto")}> I Hoop. </Person>
        <Person 
        name={this.state.persons[2].name} 
        age={this.state.persons[2].age}
        changed={this.nameChangedHandler}/>
      </div>
    );
    // return React.createElement('div', {className: 'App'}, 
    //        React.createElement('h1',{},"This is a React App!"));
  }
}
//**************************************************************************\\
			FIRST ASSIGNMENT
\\**************************************************************************//
class App extends Component {
  state = {
    username: "pacoFly1991"
  }

  nameChangeHandler = (event) => {
    this.setState({
      username: event.target.value
    })
  }

  render() {
    return (
      <div className="App">
        <UserOutput 
          username={this.state.username}
          input={<UserInput name={this.state.username} update={this.nameChangeHandler}/>}
        />
      </div>
    );
  }
}
//**************************************************************************\\
			SECTION 4 LISTS & CONDITIONALS
\\**************************************************************************//
class App extends Component {
  state = {
    persons : [
      {id: 'dfsa', name: 'KJ', age: 30},
      {id: 'g4vf', name: 'Billy', age: 33},
      {id: 'ng4uo', name: 'Musa', age: 22}
    ],
    showPersons: false
  }
  switchNameHandler = (newName) => {
    // console.log("Was clicked");
    //Don't Do This this.state.persons[0].name = "Renegade";
    this.setState({
      persons: [
        {name: newName, age: 30},
        {name: 'Billy', age: 33},
        {name: 'Musa', age: 22}
      ]
    })
  }

  nameChangedHandler = (event, id) => {
    const personIndex = this.state.persons.findIndex(p => {
      return p.id === id;
    });

    const person = {
      ...this.state.persons[personIndex]
    };
    // const person = Object.assign({}, this.state.persons[personIndex]);
    person.name = event.target.value;

    const persons = [...this.state.persons];
    persons[personIndex] = person;

    this.setState({persons: persons});
  }

  deletePersonHandler = (personIndex) => {
    // const persons = this.state.persons.slice();
    const persons = [...this.state.persons];
    persons.splice(personIndex, 1);
    this.setState({persons: persons});
  }

  togglePersonsHandler = () => {
    const doesShow = this.state.showPersons;
    this.setState({showPersons: !doesShow});
  }

  render() {
    const style = {
      backgroundColor: "white",
      font: 'inherit',
      border: "1px solid blue",
      padding: "8px",
      cursor: "pointer"
    }

    let persons = null;

    if(this.state.showPersons) {
      persons = (
        <div>
          {this.state.persons.map((person, index) => {
            return <Person
            click={() => this.deletePersonHandler(index)}
                  name={person.name}
                  age={person.age}
                  key={person.id}
                  changed={(event) => this.nameChangedHandler(event, person.id)}/>
          })}
        </div>
      );
    }
    return (
      <div className="App">
        <h1> This is a React App </h1>
        <p>This is working! </p>
        <button 
          style={style} 
          onClick={this.togglePersonsHandler}> Toggle Persons</button>
        {persons}
      </div>
    );
    // return React.createElement('div', {className: 'App'}, 
    //        React.createElement('h1',{},"This is a React App!"));
  }
}
//**************************************************************************\\
			SECOND ASSIGNMENT
\\**************************************************************************//
class App extends Component {
  state = {
    paragraph: "",
    length: 0
  }

  inputHandler = (event) => {
    let phrase = {...this.state};
    phrase.paragraph = event.target.value;
    phrase.length = event.target.value.length;
    this.setState(phrase);
  }

  deleteCharHandler = (index) => {
    let chars = this.state.paragraph.split('');

    chars.splice(index, 1);
    let paragraph = chars.join('');

    this.setState({paragraph: paragraph, 
                  length: paragraph.length});
  }

  render() {
    let chars = (
      <div>
        {this.state.paragraph.split('').map((char, index) => {
          return <Char 
              key={index}
              letter={char} 
              click={() => this.deleteCharHandler(index)} />
        })}
      </div>
    );

    return (
      <div className="App">
        <input type="text" 
          value={this.state.paragraph}
          onChange={(event) => this.inputHandler(event)} />
        <Validation length={this.state.length}/>
        <div className="Characters">
          {chars}
        </div>
      </div>
    );
  }
}

export default App;
//**************************************************************************\\
            CSS & RADIUM
\\**************************************************************************//
import React from 'react'; //Person.js
import './Person.css';
import Radium from 'radium';

const person = ( props ) => {
    const style = {
        '@media (min-width: 500px)' : {
            width: '450px'
        }
    }
    return (
        <div className="Person" style={style}>
            <p onClick={props.click}>I'm {props.name} and I am {props.age} years old!</p>
            <p>{props.children}</p>
            <input type="text" onChange={props.changed} value={props.name}/>
        </div>
);
}

export default Radium(person); 

///////////////////////////////
webpack.config.dev.js: <<changes>>
          {
            test: cssRegex,
            exclude: cssModuleRegex,
            use: getStyleLoaders({
              importLoaders: 1,
              modules: true,
              localIdentName: '[name]__[local]__[hash:base64:5]'
            }),
          },
/////////////////////////////////
webpack.config.prod.js <<changes>>
          {
            test: cssRegex,
            exclude: cssModuleRegex,
            loader: getStyleLoaders({
              importLoaders: 1,
              modules: true,
              localIdentName: '[name]__[local]__[hash:base64:5]'
            }),
___________________________________________________________________
class App extends Component {
  state = {
    persons : [
      {id: 'dfsa', name: 'KJ', age: 30},
      {id: 'g4vf', name: 'Billy', age: 33},
      {id: 'ng4uo', name: 'Musa', age: 22}
    ],
    showPersons: false
  }
  switchNameHandler = (newName) => {
    // console.log("Was clicked");
    //Don't Do This this.state.persons[0].name = "Renegade";
    this.setState({
      persons: [
        {name: newName, age: 30},
        {name: 'Billy', age: 33},
        {name: 'Musa', age: 22}
      ]
    })
  }

  nameChangedHandler = (event, id) => {
    const personIndex = this.state.persons.findIndex(p => {
      return p.id === id;
    });

    const person = {
      ...this.state.persons[personIndex]
    };
    // const person = Object.assign({}, this.state.persons[personIndex]);
    person.name = event.target.value;

    const persons = [...this.state.persons];
    persons[personIndex] = person;

    this.setState({persons: persons});
  }

  deletePersonHandler = (personIndex) => {
    // const persons = this.state.persons.slice();
    const persons = [...this.state.persons];
    persons.splice(personIndex, 1);
    this.setState({persons: persons});
  }

  togglePersonsHandler = () => {
    const doesShow = this.state.showPersons;
    this.setState({showPersons: !doesShow});
  }

  render() {

    let persons = null;
    let btnClass = '';
    if(this.state.showPersons) {
      persons = (
        <div>
          {this.state.persons.map((person, index) => {
            return <Person
            click={() => this.deletePersonHandler(index)}
                  name={person.name}
                  age={person.age}
                  key={person.id}
                  changed={(event) => this.nameChangedHandler(event, person.id)}/>
          })}
        </div>
      );
      btnClass = CSSStyles.Red
      //style statement inside conditional
      // style.backgroundColor = "red";
      // style[':hover'] = { //Radium
      //   backgroundColor: 'salmon',
      //   color: 'black'
      // }

    }

    const classes = [];
    if(this.state.persons.length <=2) {
      classes.push(CSSStyles.red); // classes = ['red']
    }
    if(this.state.persons.length <=1) {
      classes.push(CSSStyles.bold); // classes = ['red', 'bold']
    }

    return (
      // <StyleRoot>
      <div className={CSSStyles.App}>
        <h1> This is a React App </h1>
        <p className={classes.join(' ')}>This is working! </p>
        <button className={btnClass}
          onClick={this.togglePersonsHandler}>Toggle Persons</button>
        {persons}
      </div>
      // </StyleRoot>
    );
    // return React.createElement('div', {className: 'App'}, 
    //        React.createElement('h1',{},"This is a React App!"));
  }
}

export default App; //Radium(App)
//**************************************************************************\\
			SECTION 7 DEEPER COMPONENT DIVE
\\**************************************************************************//
import PropTypes from 'prop-types';
 
MyComponent.propTypes = {
  // You can declare that a prop is a specific JS primitive. By default, these
  // are all optional.
  optionalArray: PropTypes.array,
  optionalBool: PropTypes.bool,
  optionalFunc: PropTypes.func,
  optionalNumber: PropTypes.number,
  optionalObject: PropTypes.object,
  optionalString: PropTypes.string,
  optionalSymbol: PropTypes.symbol,
 
  // Anything that can be rendered: numbers, strings, elements or an array
  // (or fragment) containing these types.
  optionalNode: PropTypes.node,
 
  // A React element.
  optionalElement: PropTypes.element,
 
  // You can also declare that a prop is an instance of a class. This uses
  // JS's instanceof operator.
  optionalMessage: PropTypes.instanceOf(Message),
 
  // You can ensure that your prop is limited to specific values by treating
  // it as an enum.
  optionalEnum: PropTypes.oneOf(['News', 'Photos']),
 
  // An object that could be one of many types
  optionalUnion: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.number,
    PropTypes.instanceOf(Message)
  ]),
 
  // An array of a certain type
  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),
 
  // An object with property values of a certain type
  optionalObjectOf: PropTypes.objectOf(PropTypes.number),
 
  // An object taking on a particular shape
  optionalObjectWithShape: PropTypes.shape({
    color: PropTypes.string,
    fontSize: PropTypes.number
  }),
 
  // You can chain any of the above with `isRequired` to make sure a warning
  // is shown if the prop isn't provided.
  requiredFunc: PropTypes.func.isRequired,
 
  // A value of any data type
  requiredAny: PropTypes.any.isRequired,
 
  // You can also specify a custom validator. It should return an Error
  // object if the validation fails. Don't `console.warn` or throw, as this
  // won't work inside `oneOfType`.
  customProp: function(props, propName, componentName) {
    if (!/matchme/.test(props[propName])) {
      return new Error(
        'Invalid prop `' + propName + '` supplied to' +
        ' `' + componentName + '`. Validation failed.'
      );
    }
  },
 
  // You can also supply a custom validator to `arrayOf` and `objectOf`.
  // It should return an Error object if the validation fails. The validator
  // will be called for each key in the array or object. The first two
  // arguments of the validator are the array or object itself, and the
  // current item's key.
  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {
    if (!/matchme/.test(propValue[key])) {
      return new Error(
        'Invalid prop `' + propFullName + '` supplied to' +
        ' `' + componentName + '`. Validation failed.'
      );
    }
  })
};